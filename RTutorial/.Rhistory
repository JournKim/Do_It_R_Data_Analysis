geom_col()+
scale_x_discrete(limit = order)
ggplot(data = top20, aes(x = word, y = freq))+
geom_col()+
scale_x_discrete(limit = order)+
coord_flip()
ggplot(data = top20, aes(x = word, y = freq))+
geom_col()+
scale_x_discrete(limit = order)+
coord_flip()+
geom_text(aes(label = freq), hjust = -0.3)
ggplot(data = top20, aes(x = word, y = freq))+
geom_col()+
scale_x_discrete(limit = order)+
coord_flip()+
geom_text(aes(label = freq), hjust = -0.3)+
ylim(0,2500)
pal <- brewer.pal(8, 'Dark2')
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = T,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6,0.2),
colors = pal)
install.packages('ggiraphExtra')
library(ggiraphExtra)
str(USArrests)
# 지역명 변수가 따로 없고, 행 이름이 지역명.
library(tibble)
crime <- rownames_to_column(USArrests, var = 'state')
head(crime)
crime$state <- tolower(crime$state) # 소문자로 저
str(crime)
library(ggplot2)
states_map <- map_data('state')
str(states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map) +
geom_text(aes(label = Murder), hjust = -0.3)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T)
#kormaps2014 패키지에 필요한 stringi 패키지 설치
install.packages('stringi')
install.packages("stringi")
install.packages('devtools')
devtools::install_github('cardiomoon/kormaps2014')
library(kormaps2014)
str(changeCode(korpop1))
# korpop1 데이터의 인코딩이 utf-8 이어서 한글이 깨져 보인다.
# kormaps2014 패키지의 changeCode()로 cp949로 변환 후 str() 하면 한글이 출력된다.
str(korpop1)
# korpop1 데이터의 인코딩이 utf-8 이어서 한글이 깨져 보인다.
# kormaps2014 패키지의 changeCode()로 cp949로 변환 후 str() 하면 한글이 출력된다
# str(korpop1)
str(changeCode(korpop1))
# 변수명이 한글이면 오류 발생 가능성.
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(korpop1)
ggChoropleth(data = korpop1,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
library(ggiraphExtra)
ggChoropleth(data = korpop1,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
library(ggplot2)
ggChoropleth(data = korpop1,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
korpop1 <- changeCode(korpop1)
ggChoropleth(data = korpop1,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
# korpop1 데이터의 인코딩이 utf-8 이어서 한글이 깨져 보인다.
# kormaps2014 패키지의 changeCode()로 cp949로 변환 후 str() 하면 한글이 깨지지 않고 출력된다
# str(korpop1)
str(changeCode(korpop1))
# korpop1 데이터의 인코딩이 utf-8 이어서 한글이 깨져 보인다.
# kormaps2014 패키지의 changeCode()로 cp949로 변환 후 str() 하면 한글이 깨지지 않고 출력된다
# str(korpop1)
str(changeCode(kormaps2014::korpop1))
korpop <- kormaps2014::korpop1
rm(korpop1)
korpop <- rename(korpop,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(korpop1)
str(korpop)
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
kormap1$name
changeCode(kormap1$name)
kormap1$name1
str(korpop)
korpop$name
changeCode(korpop)
korpop_name <- changeCode(korpop)$name
korpop_name
korpop$name <- korpop_name
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
korpop <- kormaps2014::korpop1
korpop <- rename(korpop,
pop = 총인구_명,
name = 행정구역별_읍면동)
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
korpop_name <- changeCode(korpop)$name
colnames(korpop_name)
Encoding(korpop_name) <- 'UTF-8'
korpop$name
korpop_name
changeCode(korpop_name)
Encoding(korpop_name) <- 'CP949'
changeCode(korpop_name)
korpop_name
Encoding(korpop_name) <- 'UTF-8'
korpop_name
CP949
Encoding(korpop_name) <- 'CP949'
korpop_name
Encoding(korpop_name) <- 'UTF-8'
korpop_name
korpop$name <- korpop_name
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
Encoding(korpop_name) <- 'CP949'
korpop_name
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
kormap1$name1
korpop_name
korpop$name
korpop_name
korpop$name <- korpop_name
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
korpop <- kormaps2014::korpop1
korpop <- rename(korpop,
pop = 총인구_명,
name = 행정구역별_읍면동)
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
korpop_name <- korpop$name
korpop_name
Encoding(korpop_name) <- 'UTF-8'
Encoding(korpop_name) <- 'CP-949'
korpop <- kormaps2014::korpop1
korpop <- kormaps2014::korpop1
korpop <- rename(korpop,
pop = 총인구_명,
name = 행정구역별_읍면동)
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
korpop$name
encoded_name <- Encoding(korpop$name) <- 'UTF-8'
names(korpop)
head(korpop)
head(korpop$name)
head(changeCode(korpop$name))
changeCode(korpop$name)
changeCode(korpop)$name
korpop$name
changeCode(korpop)$name
ggChoropleth(data = korpop,        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
# korpop의 name이 인코딩이 utf-8이라는데, 그래서 지도에서 깨지는듯.
# CP949로 바꾸면 지도를 못만듦. 어떻게 해야되죠?
# p287
kormap1$name1
# korpop의 name이 인코딩이 utf-8이라는데, 그래서 지도에서 깨지는듯.
# CP949로 바꾸면 지도를 못만듦. 어떻게 해야되죠?
# p287
kormap1$name
# korpop의 name이 인코딩이 utf-8이라는데, 그래서 지도에서 깨지는듯.
# CP949로 바꾸면 지도를 못만듦. 어떻게 해야되죠?
# p287
changeCode(kormap1)$name
ggChoropleth(data = tbc,
aes(fill = NewPts,
map_id = code,
tooptip = name),
map = kormap1,
interactive = T)
ggChoropleth(data = tbc,
aes(fill = NewPts,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
Encoding(korpop)
Encoding(korpop$name)
class(korpop)
class(korpop$name)
crime$state <- tolower(crime$state) # 소문자로 저장 : maps 내의 state가 주 이름을 소문자로 저장.
str(changeCode(tbc))
str(tbc)
ggChoropleth(data = changeCode(korpop),        # 지도에 표현할 데이터
aes(fill = pop,        # 색깔로 표현할 변수
map_id = code,     # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,         # 지도 데이터
interactive = T)       # 인터랙티브
Encoding(korpop)
Encoding(korpop$name[0])
Encoding("aaa")
localeToCharset()
sent <- "R은 free 소프트웨어이고"
Encoding(sent)
sent2 <- iconv(sent, localeToCharset()[1], 'UTF-8')
Encoding(sent2)
sent2
sent
korpop_name$name <- iconv(korpop$name, localeToCharset()[1], 'UTF-8')
korpop_name
str(korpop_name)
str(korpop_name$name)
korpop_name <- iconv(korpop$name, localeToCharset()[1], 'UTF-8')
korpop_name
korpop$name
korpop_name <- iconv(korpop$name, localeToCharset()[1], 'CP949')
korpop_name
rm(korpop_name)
install.packages('plotly')
library(plotly)
library(ggplot2)
# mpg 데이터를 이용해 x축에 displ, y축에 hwy를 지정해 산점도 생성, col = drv (구동장식에 따라 다른 색)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplotly(p)
p2 <- ggplot(data = diamonds, aes(x = cut, fill = clarity))+
geom_bar(position = 'dodge')
ggplotly(p2)
# 경고 메시지에 따라
library(devtools)
install_github('hadley/ggplot2')
library(ggplot2)
ggplotly(p2)
# mpg 데이터를 이용해 x축에 displ, y축에 hwy를 지정해 산점도 생성, col = drv (구동장식에 따라 다른 색)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplotly(p)
library(plotly)
# 경고 메시지에 따라
library(devtools)
library(ggplot2)
# mpg 데이터를 이용해 x축에 displ, y축에 hwy를 지정해 산점도 생성, col = drv (구동장식에 따라 다른 색)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplotly(p)
p2 <- ggplot(data = diamonds, aes(x = cut, fill = clarity))+
geom_bar(position = 'dodge')
ggplotly(p2)
install.packages('dygraphs')
library(dygraphs)
economics <- ggplot2::economics
head(economics)
#dygraphs를 이용해 시계열 그래프를 만드려면 데이터가 시간 순서 속성을 지니는 xts 타입으로 되어있어야 한다.
library(xts)
eco <- xts(economics$unemploy, order.by = economics$date)
eco
dim(eco)
head(eco)
dygrap(eco)
dygraph(eco)
# %>% 를 이용해 dyRangeSelector()를 추가하면 날짜 범위 선택 기능이 추가 된다.
dygraph(eco) %>% dyRangeSelector()
eco_a <- xts(economics$psavert, order.by = economics$date)
eco_b <- xts(economics$unemploy/1000, order.by = economics$date)
eco2 <- cbind(eco_a, eco_b)
colnames(eco2) <- c('psavert', 'unemploy')
head(eco2)
dygraph(eco2) %>% dyRangeSelector()
library(dplyr)
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
mpg_diff <- mpg %>%
select(class, cty) %>%
filter(class %in% c('compact', 'suv'))
head(mpg_diff)
table(head)
table(mpg_diff)
table(mpg_diff$ class)
# 비교할 값 cty ~ 비교할 집단 class
# 비교할 집단의 분산이 같은지 여부에 따라 공식이 달라짐. 여기서는 두 집단의 분산이 같다고 가정
t.test(data = mpg_diff, cty ~ class, var.equal = T)
mpg_diff2 <- mpg %>%
select(fl, cty) %>%
filter(fl %in% c('r', 'p')) # r : regular, p: premium
table(mpg_diff2$fl)
t.test(data = mpg_diff2, cty ~ fl, var.equal = T)
economics <- as.data.frame(ggplot2::economics)
cor.test(economics$unemploy, economics$pce)
head(mtcars)
car_cor <- cor(mtcars) # 상관행렬 생성
round(car_cor, 2) # 소수점 2째 자리까지 출력
# corrrplot 패키지의 corrplot()을 이용해 상관행렬을 히트맵으로 만들면 관계를 쉽게 파악 가능.
# 상관계수가 클 수록 원의 크기가 크로 색이 진하다. 양수면 파란색, 음수면 빨간색 계열.
install.packages('corrplot')
library(corrplot)
corrplot(car_cor)
corrplot(car_cor, method = 'number')
corrplot(car_cor, method = 'number', interaction( = T))
corrplot(car_cor, method = 'number', interaction = T)
col <-colorRampPalette(c('#BB4444', '#EE9988', '#FFFFFF', '#77AADD', '#4477AA'))
corrplot(car_cor,
method = 'color',       # 색깔로 표현
col = col(200),         # 색상 200개 선정
type = 'lower',         # 왼쪽 아래만 표시
order = 'hclust',       # 유사한 상관계수끼리 군집화
addCoef.col = 'black',  # 상관계수 색깔
tl.col = 'black',       # 변수명 색깔
tl.srt = 45,            # 변수명 45도 기울임
diag = F)               # 대각 행렬 제외
exam <- read.csv('csv_exam.csv')
exam[]
exam[] # 조건없이 전체 데이터 출력
exam[1,] # 1행 출
exam[,2] # 2열 출
exam[exam$class == 1,] # class가 1인 행 추
exam[exam$class == 1] # class가 1인 행 추출
exam[exam$class == 1, ] # class가 1인 행 추출
exam[exam$class == 2, ] # class가 1인 행 추출
exam[exam$class == 1, ] # class가 1인 행 추출
exam[exam$math >= 80, ]
exam[, exam$math]
exam[, exam$id == 1]
exam[, exam$id == 2]
exam[, 7]
exam[exam$class == 1 & exam$math >= 50]
exam[exam$class == 1 & exam$math >= 50, ]
exam[, 1==1]
exam[, 1==1]
exam[, 1==2]
exam[, 0]
exam[, 'class']
exam[, c('class', 'math', 'english')]
exam[exam$class == 1, c('class', 'math', 'english')]
exam['class' == 1, c('class', 'math', 'english')]
exam[exam$class == 1, c('class', 'math', 'english')]
exam[, c(1,2)]
exam[, 'class']
# dplyr
exam %>%
filter(math>=50 & english >= 80) %>%
mutate(tot = (math+english+science)/3) %>%
group_by(class) %>%
summarise(mean = mean(tot))
# 내장함수
exam$tot <- (exam$math + exam$english + exam$science)/3
aggregate(data = exam[exam$math >= 50 & exam$english >= 80], tot~class, mean) # aggregate : 범주별 요약 통계량 구하는 함수
aggregate(data = exam[exam$math >= 50 & exam$english >= 80,], tot~class, mean) # aggregate : 범주별 요약 통계량 구하는 함수
mpg <- as.data.frame(ggplot2::mpg)
mpg$tot <- (mpg$cty + mpg$hwy) / 2
head(mpg)
aggregate(data = mpg[mpg$class == 'suv' | mpg$class == 'compact',], tot~class, mean)
var1 <- c(1,2,3,1,2)
var2 <- factor(c(1,2,3,1,2))
var1
var2
var1+2
var2+2
'asdfqwefasdfasf
asdfasdfasdfasdf
asdfasdf'
levels(var2)
var3 <- c("a','b','b','c')
q
var3 <- c('a','b','b','c')
var4 <- factor(c('a','b','c','d'))
class(var3)
class(var4)
class(mpg$drv)
mpg$drv <- as.factor(mpg$drv)
class(mpg$drv)
levels(mpg$drv)
